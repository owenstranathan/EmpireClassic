#ifndef MAP_HPP
#define MAP_HPP


#include "empire.hpp"


//global HEIGHT and WIDTH variables
const int MAP_W = 50;
const int MAP_H = 40;


////////////////////////////////////////////////////////////////////////////////////////
//TILE//////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
enum Terrain
{
    WATER,
    LAND
};

struct Tile
{
    //Sprite of the tile
    sf::Sprite sprite;
    
    //The type of terrain the tile is
    Terrain terrain;
    
    //The piece located on the terrain
    Piece * piece;
    
    //position of the tile
    int x, y;
    
    Tile() : piece(NULL)
    {}
    
    //draws the piece at it's location
    void draw(sf::RenderTexture &);
};




//determines whether a tile has a piece or not
bool canRecieve(int, int);


////////////////////////////////////////////////////////////////////////////////////////
//MAP///////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

struct Map
{
    Tile map[MAP_W][MAP_H];
    bool vision[MAP_W][MAP_H];
    
    Map(std::string)
};

//The real map that hold all the in game objects
extern Tile real_map[MAP_W][MAP_H];
//the players view map that simply dictates what is and is not visible by the player.
extern bool player_map[MAP_W][MAP_H];

//function to read predefined maps from text files
void readMap(std::string);

//function to update the player_map based on player location
void updateVision(int , int, int v = 1);

//function to check if a location is part of the map
bool isOnMap(int, int);

//for clearing the vision of the map
void clearVision();

#endif /* defined(MAP_HPP) */


